name: Stream Live Detector

on:
  schedule:
    # Run every 10 minutes between 3PM to 2AM EST
    - cron: "*/10 19-23,0-6 * * *"
  workflow_dispatch:

# Add permissions block
permissions:
  actions: read
  contents: read

jobs:
  check-stream:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests python-dotenv

      - name: Check if stream is live
        id: check_stream
        run: |
          python - <<EOF
          import requests
          import os
          import json

          channel = os.environ['CHANNEL']
          client_id = os.environ['CLIENT_ID']
          access_token = os.environ['ACCESS_TOKEN']

          headers = {
              'Client-ID': client_id,
              'Authorization': f'Bearer {access_token}'
          }

          response = requests.get(
              f'https://api.twitch.tv/helix/streams?user_login={channel}',
              headers=headers
          )

          is_live = False
          if response.status_code == 200:
              data = response.json()
              is_live = len(data['data']) > 0

          # Set output for GitHub Actions
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              print(f'is_live={str(is_live).lower()}', file=f)
          EOF
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CHANNEL: ${{ secrets.CHANNEL }}

      - name: Check for running recorder workflow and its duration
        id: check_workflow
        run: |
          python - <<EOF
          import requests
          import os
          import time

          token = os.environ['PAT']
          repo = os.environ['GITHUB_REPOSITORY']

          headers = {
              'Authorization': f'token {token}',
              'Accept': 'application/vnd.github.v3+json'
          }

          url = f'https://api.github.com/repos/{repo}/actions/runs?status=in_progress'
          response = requests.get(url, headers=headers)

          recorder_running = False
          time_exceeded = False

          for run in response.json()['workflow_runs']:
              if run['name'] == 'Chat Recorder':
                  recorder_running = True
                  start_time = time.mktime(time.strptime(run['created_at'], "%Y-%m-%dT%H:%M:%SZ"))
                  duration = time.time() - start_time
                  # Check if duration is approaching 6 hours (5.5 hours in seconds)
                  if duration > (5.5 * 3600):
                      time_exceeded = True
                  break

          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              print(f'recorder_running={str(recorder_running).lower()}', file=f)
              print(f'time_exceeded={str(time_exceeded).lower()}', file=f)
          EOF
        env:
          PAT: ${{ secrets.PAT }}

      - name: Trigger recorder if live and (not running or time exceeded)
        if: steps.check_stream.outputs.is_live == 'true' && (steps.check_workflow.outputs.recorder_running == 'false' || steps.check_workflow.outputs.time_exceeded == 'true')
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: auto_chat_recorder.yml
          token: ${{ secrets.PAT }}
